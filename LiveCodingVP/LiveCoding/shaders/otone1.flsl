varying vec4 color;                                                   
varying vec2 ppos;                                                    
uniform sampler3D Texture0;                                           
                                                                      
// uniforms;                                                          
uniform float time;                                                   
uniform float spike;                                                  
uniform float knob1, knob2, knob3, knob4, knob5;                      
uniform float knob6, knob7, knob8, knob9;                             
uniform float slider1, slider2, slider3, slider4, slider5;            
uniform float slider6, slider7, slider8, slider9;                     
                                                                      
vec2 rotate(vec2 pos, float alpha) {                                  
vec2 result;                                                          
result.x = cos(alpha)*pos.x - sin(alpha)*pos.y;                       
result.y = sin(alpha)*pos.x + cos(alpha)*pos.y;                       
return result;                                                        
}                                                                     
                                                                      
void main(void) {                                                     
vec2 relPos = (0.3 + slider9) *                                       
rotate(ppos, -time * 0.05 + knob9 * spike * 0.05);                    
relPos -= vec2(0.0, -0.1 * time);                                     
                                                                      
vec4 swirl = texture3D(Texture0, relPos.xyx * (0.03 + 0.3*slider2) +  
vec3(knob2*spike*0.1, knob3*spike*0.1, knob4*spike*0.1));             
swirl = 0.5 * swirl +                                                 
0.5 * texture3D(Texture0, relPos.yyx*0.83 + swirl.rgb);               
// apply some shattering;                                             
swirl = 0.5 * swirl + 0.5 * texture3D(Texture0, relPos.xxy*0.14 +     
slider3 * swirl.rgb + vec3(time * 0.031, time * 0.031, 0.0));         
swirl = 0.875 * swirl + 0.125 * texture3D(Texture0, swirl.rgb +       
relPos.xyy*1.2 + vec3(0.0, time * 0.043, 0.0));                       
                                                                      
vec2 swirlypos = 0.5 * relPos + 0.4 * swirl.rg +                      
vec2((time-130.0) * 0.021, 0.0);                                      
                                                                      
// swirled fog;                                                       
vec4 fog = texture3D(Texture0, swirlypos.xyx * 0.27);                 
fog += 0.5 * texture3D(Texture0, swirlypos.xyy * 0.53);               
fog += 0.25 * texture3D(Texture0, swirlypos.xxy * 0.98);              
fog += 0.125 * texture3D(Texture0, swirlypos.yxy * 2.03);             
fog += 0.2 * texture3D(Texture0, swirlypos.yyx * 3.13);               
fog += 0.1 * texture3D(Texture0, swirlypos.yxx * 5.02);               
fog = 0.5 * fog;                                                      
                                                                      
// unswirled fog;                                                     
fog += 0.03 * texture3D(Texture0, relPos.xyy * 4.11);                 
fog += 0.02 * texture3D(Texture0, relPos.xyx * 8.03);                 
fog += 0.01 * texture3D(Texture0, relPos.yxy * 13.13);                
                                                                      
// black lines;                                                       
float blackness = smoothstep(0.5, 1.1, fog.r *                        
(1.0 - 0.75 * slider1) + 0.75 * slider1);                             
                                                                      
// red fog;                                                           
float redfog = smoothstep(0.5, 1.1, fog.g *                           
(1.0 - 0.75 * slider1) + 0.75 * slider1);                             
                                                                      
// avoid fog;                                                         
redfog *= (slider5+knob1*spike) * 3.0;                                
blackness *= slider5 * 3.0;                                           
                                                                      
// some add if there is fog;                                          
vec3 col = vec3(1.5, 0.0, 0.1);                                       
vec3 blackFogAdder = col.rgb * blackness;                             
vec3 redFogAdder = redfog * mix(vec3(1.2, 0.8, 0.2),                  
vec3(1.0, 1.0, 1.0), redfog);                                         
                                                                      
gl_FragColor = vec4(redFogAdder + blackFogAdder, 1.0);                
}                                                                     
                                                                      
