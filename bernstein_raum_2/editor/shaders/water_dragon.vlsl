// Shader for Hermaniak Gasteig effect
// No transformation matrices are taken into account.

#version 120

uniform float time;

const int numCenters = 16;
const int numOvertones = 3;
varying vec3 centers[numCenters];

varying vec4 color;
varying vec3 ppos;
varying vec3 normal;

vec4 randomIteration(vec4 seed)
{
   vec4 adder = vec4(0.735, 0.369, 0.438, 0.921);
   vec4 mult = vec4(94.34, 72.15, 59.372, 49.56);
   return fract((seed.zxwy + adder) * mult);
}

void main(void) {
	gl_TexCoord[0] = gl_MultiTexCoord0 * gl_Vertex.z;
	color = gl_Color;
	ppos = vec3(gl_Vertex.x, gl_Vertex.y, gl_Vertex.z);
	normal = gl_Normal;
	gl_Position = vec4(gl_Vertex.x, gl_Vertex.y, 0.5, 1.0);

	const vec3 size = vec3(1.3, 1.3, 1.3);
	vec3 bias = vec3(0.0, 0.0, 2.0);
	const vec3 spread = vec3(0.0, 0.0, 0.0);

    /* Calculate distances to randomly movind centers */
    vec4 seed = vec4(0.3, 0.2, 0.1, 0.9);
    vec3 baseColor = vec3(0.0);
    for (int i = 0; i < numCenters; i++)
    {
		/* Calculate position of the center */
		vec3 center = vec3(0.0);
		for (int j = 0; j < numOvertones; j++)
		{
			seed  = randomIteration(seed);
			center += vec3(size.x * sin(time * seed.x + seed.z) + 2.0 * (seed.y - 0.5) * spread.x + bias.x,
						   size.y * sin(time * seed.z + seed.w) + 2.0 * (seed.w - 0.5) * spread.y + bias.y,
						   size.z * sin(time * seed.y + seed.w) + 2.0 * (seed.x - 0.5) * spread.z + bias.z);
		}
		seed = randomIteration(seed);
		centers[i] = center;
	}
}