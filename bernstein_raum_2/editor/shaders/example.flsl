#version 120

varying vec4 color;
varying vec3 ppos;
varying vec3 location;
varying vec3 normal;
uniform sampler2D BGTexture;
uniform sampler3D Noise3DTexture;
uniform float time;

vec4 background(vec2 pos) {
	return texture2D(BGTexture, vec2(0.5*pos.x + 0.5, 0.5 + 0.5*pos.y));
}

vec4 vnoise1(vec3 pos) {
	vec3 pos2 = floor(pos*16.) +
	smoothstep(0.,1., (pos*16.) - floor(pos*16.)) - 0.5;
	return texture3D(Noise3DTexture, pos2/16.);
}

vec4 vnoise(vec3 pos, float reduction, int n) {
	float intensity = 1.;
	float size = 1.;
	vec4 result = vec4(0.0);
	for (int k = 0; k < n; k++) {
		vec3 pos2 = floor(pos*size*16.) +
		smoothstep(0.,1., (pos*size*16.) - floor(pos*size*16.)) - 0.5;
		vec4 inp = texture3D(Noise3DTexture, pos2/16.);
		result = result + inp*intensity;
		intensity = intensity * reduction;
		size = size * 2.;
	}
	return result;
}

vec2 rotate(vec2 pos, float angle) {
	return pos*mat2(cos(angle),-sin(angle),sin(angle),cos(angle));
}

void main(void) {
	vec3 location = vec3(ppos.x / ppos.z, ppos.y / ppos.z, 1.0 / ppos.z);
	gl_FragColor = vnoise(0.2 * vec3(location) + time * 0.1, 0.7, 5) + 0.5;
}