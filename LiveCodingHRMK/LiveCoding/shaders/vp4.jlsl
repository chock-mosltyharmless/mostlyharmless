void main(void) {                                                     
vec3 color = vec3(0.);                                                
                                                                      
vec3 rayPos = vec3(0.,0.,-6. + 5.*vnoise1(vec3(time)*0.07));          
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time*0.3);                              
rayDir.xy = rotate(rayDir.xy, time*0.4);                              
rayPos.xz = rotate(rayPos.xz, time*0.3);                              
rayPos.xy = rotate(rayPos.xy, time*0.4);                              
float ang = vnoise1(vec3(time)*0.01).x;                               
rayPos.yz = rotate(rayPos.yz, ang);                                   
                                                                      
for (int i = 0; i < 100 && length(rayPos)<12. &&                      
totalDensity < 0.98; i++) {                                           
float implicit = length(rayPos.xxy + vec3(0.0, 3.5, 0.0)+             
vnoise1(rayPos*0.01 + vec3(time*0.1)).xy)-2.;                         
                                                                      
float amounter =                                                      
pow(vnoise3(rayPos*0.02 + vec3(time)*0.01, 0.8).x, 1.5) *             
sin(time*3.) * 9.0;                                                   
implicit += 3.3*vnoise3(rayPos*0.03 - vec3(time)*0.01, 0.6).x         
* amounter * max(0.0, (1. - abs(implicit)));                          
                                                                      
float density = smoothstep(0.,-0.3,implicit);                         
totalDensity += (1.-totalDensity)*density;                            
totalDensity += 0.01;                                                 
//totalColor += mix(vec3(0.1, 0.07, 0.03),                            
//vec3(0.04, 0.03, 0.02),                                             
//min(1.0,max(0.0,length(rayPos+vec3(1.5))-1.5)));                    
totalColor += vec3(0.06, 0.04, 0.02) *                                
(.7 - sin(rayPos.x*6.));                                              
totalColor -= (amounter) / (1. + 5.*abs(implicit)) *                  
vec3(.05, 0.05, 0.08);                                                
                                                                      
rayPos += rayDir * max(0.05, abs(implicit)*0.7*.5);                   
}                                                                     
                                                                      
color = mix(color,totalColor,totalDensity);        
color *= (1. - knob9);                                                
color = mix(color, vec3(dot(color, vec3(0.3,0.5, 0.2))), knob8*1.3);  

gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
