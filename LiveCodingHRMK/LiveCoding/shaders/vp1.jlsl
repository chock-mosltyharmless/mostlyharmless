void main(void) {                                                     
vec3 color = vec3(0.);                                                
vec3 rayPos = vec3(0., 0., 0. - 8.);                                  
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time*.3);                               
rayDir.xy = rotate(rayDir.xy, time*.3);                               
rayPos.xz = rotate(rayPos.xz, time*.3);                               
rayPos.xy = rotate(rayPos.xy, time*.3);                               
                                                                      
for (int i = 0; i < 100 && length(rayPos) < 40. &&                    
totalDensity < 0.95; i++) {                                           
                                                                      
vec3 noisePos = rayPos +                                              
1.*vnoise3(rayPos*0.1 + vec3(time*0.05), 0.5).xyz;                    
float implicit = length(rayPos +                                      
sin(rayPos.x+time) *                                                  
6. * vnoise3(noisePos*0.01,0.5).xyz) - 3.;                            
                                                                      
float density = smoothstep(0.2, -0.5, abs(implicit));                 
totalColor += 0.03 * (1. - totalDensity) *                            
mix(vec3(.0, 2., 3.), vec3(3., 1., 1.0),                              
vnoise1(rayPos*0.01).r + 0.5);                                        
totalColor -= (1.-totalDensity) * density * density * 5.;             
//totalColor += noisePos * density * (1. - totalDensity);             
totalDensity += (1. - totalDensity) * density;                        
totalDensity += 0.01;                                                 
                                                                      
rayPos += rayDir * max(0.03, abs(implicit) * .5f);                    
}                                                                     
                                                                      
color = mix(vec3(0.1, -0.4, 0.1), vec3(-0.4, -0.2, 0.0),              
rayDir.y+0.5);                                                        
color = mix(color, totalColor, totalDensity);                         
                                                                      
gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
                                                                      
