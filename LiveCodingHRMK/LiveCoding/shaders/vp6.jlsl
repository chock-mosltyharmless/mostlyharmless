void main(void) {                                                     
vec3 color = vec3(0.);                                                
vec3 rayPos = vec3(0., 0., 0. - 8.);                                  
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time);                                  
rayDir.xy = rotate(rayDir.xy, time);                                  
rayPos.xz = rotate(rayPos.xz, time);                                  
rayPos.xy = rotate(rayPos.xy, time);                                  
                                                                      
for (int i = 0; i < 100 && length(rayPos) < 12. &&                    
totalDensity < 0.95; i++) {                                           
                                                                      
float distort = vnoise1(rayPos*0.02).g;                               
float smoothness = vnoise1(rayPos*0.01).x*5.;                         
float bumper = 0.5;                                                   
bumper += spike*4.*slider2+0.5;                                       
vec3 noisePos = rayPos + bumper*vnoise5(rayPos*0.03*distort +         
vec3(time*0.04), slider1).xyz;                                        
float implicit = length(noisePos) - 3.*slider3;                       
implicit += vnoise1(rayPos*0.04).b*8.*slider4;                        
                                                                      
float density = smoothstep(0., -0.3, implicit);                       
totalDensity += (1. - totalDensity) * density;                        
totalDensity += 0.01;                                                 
totalColor += 4.*mix(vec3(0.01,0.013,0.014), vec3(0.014,0.012,0.009), 
sin(noisePos.x*2.*noisePos.z));                                       
                                                                      
rayPos += rayDir * max(0.03, abs(implicit) * .5f);                    
}                                                                     
                                                                      
color = mix(vec3(0.3,0.2,0.1), vec3(0.2,0.2,0.4),                     
rayDir.z*rayDir.x*2.);                                                
color = mix(color, totalColor, totalDensity);                         
color *= (1. - knob9);                                                
color = mix(color, vec3(dot(color, vec3(0.3,0.5, 0.2))), knob8*1.3);  
gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
                                                                      
