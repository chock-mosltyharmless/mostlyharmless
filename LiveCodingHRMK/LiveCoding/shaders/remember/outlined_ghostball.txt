void main(void) {                                                     
vec3 color = vec3(0.);                                                
vec3 rayPos = vec3(0., 0., 0. - 8.);                                  
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time);                                  
rayDir.xy = rotate(rayDir.xy, time);                                  
rayPos.xz = rotate(rayPos.xz, time);                                  
rayPos.xy = rotate(rayPos.xy, time);                                  
                                                                      
for (int i = 0; i < 100 && length(rayPos) < 12. &&                    
totalDensity < 0.95; i++) {                                           
                                                                      
vec3 dval = vnoise1(rayPos.bgr*0.04).rgb;                             
vec3 nval = vnoise5(rayPos*0.05*slider1*dval.r*slider9 +              
vec3(time)*0.03, 0.5).rgb;                                            
float implicit = abs(length(rayPos + nval * slider2*3.) - 3.) -       
spike * 3. * slider3;                                                 
implicit -= slider5 * nval.g * 5.;                                    
                                                                      
float density = smoothstep(0., -0.1, implicit);                       
totalDensity += (1. - totalDensity) * density;                        
totalDensity += 0.01;                                                 
totalColor += (1.0-totalDensity)*mix(vec3(0.01, 0.015, 0.02),         
vec3(0.025, 0.017, 0.01), nval.r * 5. * slider4)                      
 * 3. * slider7 *                                                     
((sin(rayPos.x*3.)*spike + 0.7)*3.*slider8 + 1.*(1.-slider8));        
totalColor -= totalDensity*0.1-0.01;                                  
                                                                      
rayPos += rayDir * max(0.03, abs(implicit) * .3f);                    
}                                                                     
                                                                      
color = mix(color, totalColor, totalDensity);                         
                                                                      
gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
                                                                      
