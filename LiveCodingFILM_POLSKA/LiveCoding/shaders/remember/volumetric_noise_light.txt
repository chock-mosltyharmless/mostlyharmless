void main(void) {                                                     
vec3 color = vec3(0.);                                                
vec3 rayPos = vec3(0., 0., 0. - 8.);                                  
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time);                                  
rayDir.xy = rotate(rayDir.xy, time);                                  
rayPos.xz = rotate(rayPos.xz, time);                                  
rayPos.xy = rotate(rayPos.xy, time);                                  
                                                                      
for (int i = 0; i < 100 && length(rayPos) < 12. &&                    
totalDensity < 0.95; i++) {                                           
                                                                      
vec3 dval = vnoise1(rayPos * 0.1 * slider4 + vec3(time*0.03)).rgb;    
vec3 nval = vnoise5(dval*3.*slider5 +                                 
rayPos * 0.1 * slider1 + vec3(time*0.05),                             
slider2 + knob1 * spike).rgb;                                         
float implicit = length(rayPos + slider3*nval*5.) - 3. -              
2.*knob3*spike - 2.*knob6;                                            
                                                                      
float maxMove = (length(dval))*8. + 0.1;                              
float colAdd = smoothstep(3., 0.1, maxMove)*50.*knob5+1.;             
                                                                      
float density = smoothstep(0., -knob4, implicit);                     
totalDensity += (1. - totalDensity) * density;                        
totalDensity += 0.01;                                                 
totalColor += mix(vec3(0.01, 0.012, 0.014),                           
vec3(0.015, 0.013, 0.01), nval.r*10.*knob2) * colAdd * knob8;         
                                                                      
rayPos += rayDir * max(0.03, min(maxMove,abs(implicit)) * .4f);       
}                                                                     
                                                                      
color = mix(color, totalColor, totalDensity);                         
                                                                      
gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
                                                                      
