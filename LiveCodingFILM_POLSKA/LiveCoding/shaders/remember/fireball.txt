void main(void) {                                                     
vec3 color = vec3(0.);                                                
vec3 rayPos = vec3(0., 0., 0. - 8.);                                  
vec3 rayDir = normalize(vec3(ppos, 2.));                              
vec3 totalColor = vec3(0.);                                           
float totalDensity = 0.;                                              
                                                                      
rayDir.xz = rotate(rayDir.xz, time);                                  
rayDir.xy = rotate(rayDir.xy, time);                                  
rayPos.xz = rotate(rayPos.xz, time);                                  
rayPos.xy = rotate(rayPos.xy, time);                                  
                                                                      
for (int i = 0; i < 100 && length(rayPos) < 12. &&                    
totalDensity < 0.95; i++) {                                           
                                                                      
vec3 nval2 = vnoise3(rayPos * 0.3 * slider7,0.3).rgb;                 
vec3 nval = vnoise5(rayPos*0.007*slider2 * nval2                      
+ vec3(time*0.03), 0.7).rgb;                                          
float implicit = length(rayPos + nval * 5. * slider3)                 
- 2. - spike * slider1 - 3. * slider4;                                
implicit += nval.g * 10.*slider5;                                     
                                                                      
float density = smoothstep(0., -0.3, implicit);                       
totalDensity += (1. - totalDensity) * density;                        
totalDensity += 0.01;                                                 
totalColor += mix(vec3(0.01, 0.014, 0.018),                           
vec3(0.02, 0.015, 0.01), nval.r * 10.*knob1) * 5. * knob2;            
                                                                      
rayPos += rayDir * max(0.03, abs(implicit) * .3f);                    
}                                                                     
                                                                      
color = mix(color, totalColor, totalDensity);                         
                                                                      
gl_FragColor = vec4(color, 1.0);                                      
}                                                                     
                                                                      
                                                                      
