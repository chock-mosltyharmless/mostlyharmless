#version 330 core

layout (location=0) in vec4 position_;
layout (location=1) in vec4 color_;

out vec4 particle_color_;
out float particle_magic_;

uniform float time;
uniform mat4 r;
uniform mat4 R;

vec3 swirl(vec3 move_pos, float scale)
{
    vec3 swirl_pos = move_pos
        + sin(scale * move_pos.x + cos(3.0 * move_pos.y)) * vec3(0.7, -0.4, 0.3) / pow(scale,2.*r[0][1])
        + sin(scale * move_pos.y + cos(2.3 * move_pos.z)) * vec3(-0.6, 0.2, -0.8) / pow(scale,2.*r[0][1])
        + cos(scale * move_pos.z + sin(2.6 * move_pos.x)) * vec3(0.6, 0.8, -0.9) / pow(scale,2.*r[0][1]);
    return swirl_pos;
}

vec2 rotate(vec2 pos, float angle)
{
    return pos * mat2(cos(angle), sin(angle), -sin(angle), cos(angle));
}

void main(void) {
	vec3 pos = position_.xyz;

    vec3 move_pos = vec3(0.3 * time + 0.5 * sin(time*0.5), 5.0 * sin(time * 0.05), 8.0 * sin(time * 0.03)) + pos;
    move_pos += 50.0 * vec3(r[1][3], r[2][0], r[2][1]);
    vec3 swirl_pos = swirl(swirl(swirl(swirl(move_pos, 1.0), 2.0), 4.0), 8.0);

    vec3 box_pos = fract(swirl_pos + vec3(0.5)) - vec3(0.5);

    vec3 rel_pos = vec3(0.0, box_pos.yz);
    float dist = length(rel_pos);
    
    float move_amount = 1.0 / (1.0 + 3.0 * dist);
    vec3 new_pos = pos - move_amount * rel_pos;

    vec3 color_pos = 2.0 * r[3][2] * swirl_pos;

    float hue_t = 0.5 * sin(color_pos.x) + 0.5 + 2.*r[2][2] - 1.0;
    vec3 hue = mix(vec3(1.0, 0.7, 0.0), vec3(0.0, 0.5, 1.0), hue_t);
    
    hue_t = 0.5 * sin(color_pos.y) + 0.5 + 2.*r[2][3] - 1.0;
    hue = mix(hue, vec3(0.5, 1.0, 0.7), hue_t);
    
    float brightness = 0.5 * sin(color_pos.y) + 0.5 + 2.*r[3][0] - 1.0;
    float saturation = 0.5 * sin(color_pos.z) + 0.5 + 2.*r[3][1] - 1.0;
    saturation = smoothstep(0.0, 1.0, saturation);

    particle_color_.rgb = mix(hue, vec3(1.0, 1.0, 1.0), saturation) * brightness;
    particle_color_.a = smoothstep(0.0, 1.0, 1.0 - dist);

    // Rotate camera a little
    new_pos.xy = rotate(new_pos.xy, 0.2 * sin(0.3 * time + cos(time * 1.1 + 0.3 * sin(time * 2.5))));
    new_pos.xz = rotate(new_pos.xz, 0.2 * sin(0.4 * time + cos(time * 1.2 + 0.3 * sin(time * 3.1))));
    new_pos.yz = rotate(new_pos.yz, 0.2 * sin(0.37 * time + cos(time * 1.3 + 0.3 * sin(time * 2.7))));

    // Move to show what's going on
    new_pos.z += 0.5 * sin(0.4 * time) + 0.7;

	gl_Position = vec4(new_pos, new_pos.z);
    particle_magic_ = color_.a;
}