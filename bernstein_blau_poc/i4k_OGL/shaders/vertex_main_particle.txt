#version 330 core

layout (location=0) in vec4 position_;
layout (location=1) in vec4 color_;

out vec4 particle_color_;
out float particle_magic_;

uniform mat4 r;

float GetImplicit(vec3 pos) {
    float time = r[0][0];

    pos.x -= sin(time*0.3)*0.2;
    pos.y -= cos(time*0.4)*0.2;
    pos.z -= sin(time*0.5)*0.2;

    pos.z -= sin(pos.y*0.3)*0.3;
    pos.x -= sin(pos.z*0.5)*0.3;
    pos.y -= sin(pos.x*.25)*0.3;

    float implicit = length(pos) - sin(12.0*length(pos)) / 12.0 - .75 - 0.2 * sin(time*0.);
    return implicit;
}

void main(void) {
    float time = r[0][0];

    float yrot = sin(time*0.2)*1.0;
    mat2 yrotmat = mat2(cos(yrot),sin(yrot),-sin(yrot),cos(yrot));

    float implicit = GetImplicit(position_.xyz);
    float amount = 1.2 - smoothstep(0.0, 0.4, abs(implicit));

    const float dd = 0.01;
    float dx_implicit = GetImplicit(position_.xyz + vec3(dd, 0., 0.)) - implicit;
    float dy_implicit = GetImplicit(position_.xyz + vec3(0., dd, 0.)) - implicit;
    float dz_implicit = GetImplicit(position_.xyz + vec3(0., 0., dd)) - implicit;

	vec3 f = position_.xyz * 0.45;
    f.xz *= yrotmat;
    f.x += 12.*sin(time*0.19) * sin(position_.z*7.) * dx_implicit * amount;
    f.y += 12.*sin(time*0.21) * sin(position_.x*5.) * dy_implicit * amount;
    f.z += 12.*sin(time*0.37) * sin(position_.y*6.) * dz_implicit * amount;
    f.x *= 0.56;
    f.z += .7 + 0.7 * sin(time*0.2);
    f.x -= 0.1;
    f.y += 0.1;
	gl_Position = vec4(f, f.z);
    particle_magic_ = color_.a;

    particle_color_.r = 0.8 - length(position_.xyz) * .1;
    particle_color_.g = 1.2 - length(position_.xyz) * .8;
    particle_color_.b = max(0., 1.5 - length(position_.xyz) * 1.3);

    particle_color_.rgb *= pow(1. - particle_magic_, 30.) * 3. + 1.0;

    particle_color_.rgb += pow(abs(sin(particle_magic_*100. + time)),10.);

    //particle_color_.rgb = vec3(particle_magic_, 0.0, 1.0 - particle_magic_);

    particle_color_.a = 1.0;

    float darkener = abs(sin(position_.x * 7.) + cos(position_.z * 5.));
    particle_color_.a += darkener * 3.;
    particle_color_.rgb -= vec3(darkener);

    // flashing
    //particle_color_.rgb *= 1. + pow(abs(sin(time*2.)), 10.) / (length(position_.xyz) + 0.1);

    particle_color_.rgb = max(vec3(0.), particle_color_.rgb);

	particle_color_ *= vec4(amount) * (1.0 - abs(particle_magic_ - 0.5));
}