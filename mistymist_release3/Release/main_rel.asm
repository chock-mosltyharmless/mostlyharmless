; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Joachim Hofer\Documents\mostlyharmless\mistymist_release3\i4k_OGL\src\_windows\main_rel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__fltused
_BSS	SEGMENT
__fltused DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_wavHeader DD	046464952H
	DD	01281504H
	DD	045564157H
	DD	020746d66H
	DD	010H
	DD	020001H
	DD	0ac44H
	DD	02b110H
	DD	0100004H
	DD	061746164H
	DD	012814e0H
_pfd	DW	028H
	DW	01H
	DD	025H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	??_C@_06GGHJAEBN@static?$AA@			; `string'
PUBLIC	?entrypoint@@YGXXZ				; entrypoint
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__wglSwapLayerBuffers@8:PROC
EXTRN	?intro_do@@YGXJ@Z:PROC				; intro_do
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__sndPlaySoundA@8:PROC
EXTRN	?mzk_init@@YGXPAF@Z:PROC			; mzk_init
EXTRN	?intro_init@@YGXXZ:PROC				; intro_init
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
_BSS	SEGMENT
_myMuzik DW	0940a86H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_06GGHJAEBN@static?$AA@
; File c:\users\joachim hofer\documents\mostlyharmless\mistymist_release3\i4k_ogl\src\_windows\main_rel.cpp
CONST	SEGMENT
??_C@_06GGHJAEBN@static?$AA@ DB 'static', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?entrypoint@@YGXXZ
_TEXT	SEGMENT
_msg$31482 = -36					; size = 28
_hDC$ = -8						; size = 4
_to$ = -4						; size = 4
?entrypoint@@YGXXZ PROC					; entrypoint, COMDAT

; 63   : {              

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 64   :     // full screen
; 65   :     #ifdef SETRESOLUTION
; 66   :     if( ChangeDisplaySettings(&screenSettings,CDS_FULLSCREEN)!=DISP_CHANGE_SUCCESSFUL) return;
; 67   :     #endif	
; 68   :     // create window
; 69   :     HWND hWnd = CreateWindow( "static",0,WS_POPUP|WS_VISIBLE|WS_MAXIMIZE,0,0,0,0,0,0,0,0);

	xor	ebx, ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	-1862270976				; 91000000H
	push	ebx
	push	OFFSET ??_C@_06GGHJAEBN@static?$AA@
	push	ebx
	call	DWORD PTR __imp__CreateWindowExA@48

; 70   :     HDC hDC = GetDC(hWnd);

	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	esi, eax

; 71   :     // initalize opengl
; 72   :     if( !SetPixelFormat(hDC,ChoosePixelFormat(hDC,&pfd),&pfd) ) return;

	mov	eax, OFFSET _pfd
	push	eax
	push	eax
	push	esi
	mov	DWORD PTR _hDC$[ebp], esi
	call	DWORD PTR __imp__ChoosePixelFormat@8
	push	eax
	push	esi
	call	DWORD PTR __imp__SetPixelFormat@12
	test	eax, eax
	je	$LN6@entrypoint

; 73   :     HGLRC hRC = wglCreateContext(hDC);

	push	esi
	call	DWORD PTR __imp__wglCreateContext@4

; 74   :     wglMakeCurrent(hDC,hRC);

	push	eax
	push	esi
	call	DWORD PTR __imp__wglMakeCurrent@8

; 75   : 
; 76   : 	// init intro
; 77   : 	intro_init();

	call	?intro_init@@YGXXZ			; intro_init

; 78   : 
; 79   : #ifdef USEDSOUND
; 80   : 	// calculate music
; 81   : 	mzk_init( myMuzik+22 );

	push	OFFSET _myMuzik+44
	call	?mzk_init@@YGXPAF@Z			; mzk_init

; 82   : 	// and play it 
; 83   :     memcpy( myMuzik, wavHeader, 44 );

	push	11					; 0000000bH
	pop	ecx

; 84   :     sndPlaySound( (const char*)&myMuzik, SND_ASYNC|SND_MEMORY );

	push	5
	mov	esi, OFFSET _wavHeader
	mov	edi, OFFSET _myMuzik
	push	OFFSET _myMuzik
	rep movsd
	call	DWORD PTR __imp__sndPlaySoundA@8

; 85   : #endif
; 86   : 
; 87   :     long t;
; 88   : 	long to = timeGetTime();

	mov	edi, DWORD PTR __imp__timeGetTime@0
	call	edi
	mov	DWORD PTR _to$[ebp], eax
$LL4@entrypoint:

; 89   :     do 
; 90   : 	{
; 91   : 		MSG msg;
; 92   : 		PeekMessage(&msg, NULL, 0, 0, PM_REMOVE);

	push	1
	push	ebx
	push	ebx
	push	ebx
	lea	eax, DWORD PTR _msg$31482[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20

; 93   : 
; 94   : 		ShowCursor(0);

	push	ebx
	call	DWORD PTR __imp__ShowCursor@4

; 95   :         t = timeGetTime(); 

	call	edi
	mov	esi, eax

; 96   :         //if( !to ) to=t; 
; 97   :         t = t-to;//-150;

	sub	esi, DWORD PTR _to$[ebp]

; 98   : 
; 99   :         intro_do(t);

	push	esi
	call	?intro_do@@YGXJ@Z			; intro_do

; 100  :         //SwapBuffers ( hDC );   
; 101  :         wglSwapLayerBuffers( hDC, WGL_SWAP_MAIN_PLANE );

	push	1
	push	DWORD PTR _hDC$[ebp]
	call	DWORD PTR __imp__wglSwapLayerBuffers@8

; 102  : 	} while ( !(GetAsyncKeyState(VK_ESCAPE) || GetAsyncKeyState(VK_F4)) && t<(MZK_DURATION*1000) );

	push	27					; 0000001bH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	jne	SHORT $LN1@entrypoint
	push	115					; 00000073H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	jne	SHORT $LN1@entrypoint
	cmp	esi, 110000				; 0001adb0H
	jl	SHORT $LL4@entrypoint
$LN1@entrypoint:

; 103  : 
; 104  :     sndPlaySound(0,0);

	push	ebx
	push	ebx
	call	DWORD PTR __imp__sndPlaySoundA@8

; 105  : 
; 106  :     ExitProcess(0);

	push	ebx
	call	DWORD PTR __imp__ExitProcess@4
$LN10@entrypoint:
$LN6@entrypoint:
	pop	esi
	pop	ebx

; 107  : }

	leave
	ret	0
$LN9@entrypoint:
?entrypoint@@YGXXZ ENDP					; entrypoint
_TEXT	ENDS
END
